Root: workflows*=Workflow
      assembledWorkflows*=AssembledWorkflow
      espaces*=ESpace;

Workflow:
    'workflow' name=ID '{'
        elements*=Element
    '}'
;

// Note: StartAndEndEvent has to be come BEFORE StartEvent in the next line
Element: Node | DefineData | ConfigureTask | ConfigureData |  StartAndEndEvent | StartEvent | EndEvent | TaskLink | ConditionLink | DataLink | GroupTask | Comment;

Node:
    DefineTask | Operator
;

StartAndEndEvent:
    'START'
    '->'
    (nodes=[Node] '->')+
    'END'
    ';'
;

StartEvent:
    'START'
    ('->' nodes+=[Node])+
    ';'
;

EndEvent:
    (nodes=[Node] '->')+
    'END'
    ';'
;

TaskLink:
    initial_node=[Node]
    ('->' nodes+=[Node])+
    ';'
;

ConfigureTask:
    'configure task' alias=[DefineTask] '{'
        ('param' parameters=ID ('=' values=INT | STRING | FLOAT | BOOL | "null")* ';')*
        ('implementation' workflow=[Workflow]';' | 'implementation' filename=STRING';')?
        ('dependency' dependency=STRING';')?
        (subtasks=ConfigureTask)*
    '}';

DefineTask: 'define task' name=ID ';';

ConfigureData:
    'configure data' alias=[DefineData] '{'
        'path' path=STRING';'
    '}';

Operator: 'define operator' name=ID ';';

DefineData: 'define data' name=ID '[''data=' data*=[Value][','] '];'  | 'define data' name=ID ';' ;

Value: STRING | INT | FLOAT | BOOL | "null";

DataLink:
    initial=[Node] ('-->' rest=[Data])* ';' |
    initial=[Data] ('-->' rest=[Node])* ';'
;


ConditionLink: from_node=[Node] '->' condition=STRING '?' if_node=[Node]  ':' else_node=[Node] '->' continuation_Node=[Node] ';';

GroupTask:  'group' name=ID '{' node+=[Node]* '};' ;

AssembledWorkflow:
    'assembled workflow' name=ID 'from' parent_workflow=[Workflow] '{'
        (tasks=ConfigureTask)*
    '}';

ESpace:
    'espace' name=ID 'of' assembled_workflow=[AssembledWorkflow] '{'
        configure=ConfigureBlock
        (tasks=ESpaceTaskConfiguration)*
    '}';

ConfigureBlock:
    'configure self {'
            (methods=Method | vps=VP)*
    '}';

Method: 'method' type=ID 'as' name=ID ('{' 'runs' '=' runs=INT '}')? ';';

VP:
    method=[Method] '.' name=ID '=' vp_values=VP_values
;

VP_values:
    'enum(' values+=INT [','] ')' ';' |
    'enum(' values+=STRING [','] ')' ';' |
    'range([' min=INT ',' max=INT '])' ';'
;

ParameterConfiguration: 'param' name=ID '=' method=[Method] '.' vp=ID ';';

ESpaceTaskConfiguration:
    'task' alias=[DefineTask] '{'
         (config=ParameterConfiguration)*
    '}';

Comment: /\/\/.*$/;
